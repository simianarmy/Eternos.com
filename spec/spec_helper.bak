# $Id: spec_helper.bak 1747 2009-04-01 17:07:45Z devadmin $
# This file is copied to ~/spec when you run 'ruby script/generate rspec'
# from the project root directory.
# ...which makes all local modifications kind of dangerous - but this is where
# they say to put things.

ENV["RAILS_ENV"] = "test"
require File.dirname(__FILE__) + "/../config/environment" unless defined?(RAILS_ROOT)
require 'spec/autorun'
require 'rspec_rails_mocha'

Spec::Runner.configure do |config|
  include AuthenticatedTestHelper
  
  # If you're not using ActiveRecord you should remove these
  # lines, delete config/database.yml and disable :active_record
  # in your config/boot.rb
  config.use_transactional_fixtures = true
  config.use_instantiated_fixtures  = false
  Test::Unit::TestCase.fixture_path = config.fixture_path = RAILS_ROOT + '/spec/fixtures/'
  
  # == Fixtures
  #
  # You can declare fixtures for each example_group like this:
  #   describe "...." do
  #     fixtures :table_a, :table_b
  #
  # Alternatively, if you prefer to declare them only once, you can
  # do so right here. Just uncomment the next line and replace the fixture
  # names with your fixtures.
  #
  # config.global_fixtures = :table_a, :table_b
  config.global_fixtures = :all
  #
  # If you declare global fixtures, be aware that they will be declared
  # for all of your examples, even those that don't use them.
  #
  # You can also declare which fixtures to use (for example fixtures for test/fixtures):
  #
  # config.fixture_path = RAILS_ROOT + '/spec/fixtures/'
  #
  # == Mock Framework
  #
  # RSpec uses it's own mocking framework by default. If you prefer to
  # use mocha, flexmock or RR, uncomment the appropriate line:
  #
  config.mock_with :mocha
  # config.mock_with :flexmock
  # config.mock_with :rr
  #
  # == Notes
  # 
  # For more information take a look at Spec::Example::Configuration and Spec::Runner
  
  config.before(:each) do
    full_example_description = "#{self.class.description} #{@method_name}"
    Rails::logger.info("\n\n#{full_example_description}\n#{'-' * (full_example_description.length)}")
  end
end

require File.expand_path(File.dirname(__FILE__) + '/models/common_settings_spec_helper')
require File.expand_path(File.dirname(__FILE__) + '/models/contents_spec_helper')

module Workling
  class Base
    class RailsBase
      def self.register; end
    end
  end
end
worker_path = File.dirname(__FILE__) + "/../app/workers"
spec_files = Dir.entries(worker_path).select {|x| /\.rb\z/ =~ x}
spec_files -= [ File.basename(__FILE__) ]
spec_files.each { |path| require(File.join(worker_path, path)) }

# Disable domain lookups
EmailVeracity::Config[:lookup] = false

def set_mailer_in_test
  ActionMailer::Base.delivery_method = :test
  ActionMailer::Base.perform_deliveries = false
  ActionMailer::Base.deliveries = []
end  

module SaasSpecHelper
  def valid_address(attributes = {})
    {
      :first_name => 'John',
      :last_name => 'Doe',
      :address1 => '2010 Cherry Ct.',
      :city => 'Mobile',
      :state => 'AL',
      :zip => '36608',
      :country => 'US'
    }.merge(attributes)
  end

  def valid_card(attributes = {})
    { :first_name => 'Joe', 
      :last_name => 'Doe',
      :month => 2, 
      :year => Time.now.year + 1, 
      :number => '1', 
      :type => 'bogus', 
      :verification_value => '123' 
    }.merge(attributes)
  end

  def valid_user(attributes = {})
    { :login => 'foobar',
      :password => 'foobarass', 
      :password_confirmation => 'foobarass',
      :email => "bubba@hotmail.com",
      :first_name => "dr",
      :last_name => "no"
    }.merge(attributes)
  end
end

def skip_email_validation
  EmailVeracity::Address.stubs(:new).returns(@emv_addr=mock('EmailVeracity::Address'))
  @emv_addr.stubs(:valid?).returns(true)
end

describe "a user is signed in", :shared => true do
  before( :each ) do
    @user = users(:quentin)
    @controller.stubs(:current_user).returns(@user)
  end
end

describe "a member is signed in", :shared => true do
  before( :each ) do
    @user = @member = users(:member)
    @controller.stubs(:current_user).returns(@user)
  end
end

describe "an admin is signed in", :shared => true do
  before( :each ) do
    @user = @admin = users(:admin)
    @controller.stubs(:current_user).returns(@user)
  end
end

def response_to_json 
  ActiveSupport::JSON.decode(@response.body)
end

def time_period_attributes(start_t, end_t)
  {:time_period => {
    :beginning => date_select_attributes(start_t, "beginning"),
    :end => date_select_attributes(end_t, "end")
    }}
end

def date_select_attributes(t, attr)
  {"#{attr}(1i)"=>"#{t.year}", "#{attr}(2i)"=>"#{t.month}", "#{attr}(3i)"=>"#{t.day}", "#{attr}(4i)"=>"#{t.hour}", "#{attr}(5i)"=>"00"}
end

module UserSpecHelper
  def create_user(options = {})
    User.create(valid_attributes.merge(options))
  end
  
  def build_user(options = {})
    User.new(valid_attributes.merge(options))
  end
  
  def valid_attributes
    { :login      => nil,
      :first_name => 'jack',
      :last_name  => 'johnson',
      :email      => 'lame@hotmail.com', 
      :password   => 'quireshnizz', 
      :password_confirmation => 'quireshnizz' }
  end
  
  def make_user_account_admin(user, account)
    user.is_admin_for account
  end
end

module GuestSpecHelper
  def create_guest(options={})
    Guest.create(valid_attributes.merge(options))
  end
  
  def valid_attributes
    {:first_name => 'jack',
    :last_name  => 'johnson',
    :email => 'fame@hotmail.com'}
  end
end

module AddressBookSpecHelper
  def valid_attributes
    name_attrs
  end
  
  def name_attrs
    {:first_name => 'dr', :last_name => 'jones'}
  end
  
  def create_address_attrs
    {:address => {
      :street_1 => 'street', :city => 'Seattle', :postal_code => '666', 
      :country_id=>Country.first.id, :location_type => Address::Home}}
  end
  
  def create_new_phone_number_attrs
    {:new_phone_number_attributes => [{:area_code => '206', :number => '555-5555', 
      :phone_type=>PhoneNumber::PhoneTypes['Home']}]}
  end
  
  def create_empty_new_phone_number_attrs
    {:new_phone_number_attributes => [{:area_code => '', :number => '', 
      :phone_type=>PhoneNumber::PhoneTypes['Home']}]}
  end
  
  def create_existing_phone_number_attrs
    {:existing_phone_number_attributes => {:area_code => '206', :number => '555-5555'}}
  end
  
  def create_user_details
    @member_detail = AddressBook.new(valid_attributes.merge(create_address_attrs))
    @member_detail.user = @user
    @member_detail.save!
    @member_detail
  end
end

module ContentSpecHelper
  def valid_attributes
    {:title => 'foo foo'}
  end
  
  def create_content(content, options={})
    Content.factory({:uploaded_data => content}.merge(options))
  end
  
  def text_file
     fixture_file_upload('foo.txt', Mime::TEXT.to_s)
   end

   def image_file
     fixture_file_upload('drinky crow.jpg', 'image/jpeg')
   end

   def audio_file
     fixture_file_upload('audio.mp3', 'audio/mpeg')
   end
   
   def video_file
     fixture_file_upload('small_movie.mov', 'video/quicktime')
   end
   
   def web_video_file
     fixture_file_upload('flash_movie.flv', 'video/x-flv')
   end
   
   def ajax_update(params={})
     xhr :post, :update, params
   end
   
   def attachment_processed?(content)
      not content.read_attribute(:saved_attachment).nil?
   end
end

module ContentAuthorizationSpecHelper
  def all_public_attributes
    {:privacy_settings => {:authorization => ContentAuthorization::AuthPublic}}
  end
  
  def all_private_attributes
    {:privacy_settings => {:authorization => ContentAuthorization::AuthPrivate}}
  end
  
  def partial_privacy_attributes(guests=[], circles=[])
    {:privacy_settings => {:authorization => ContentAuthorization::AuthPartial,
    :guests => guests.collect {|g| g.id.to_s},
    :circles => circles.collect {|c| c.id.to_s}
  }}
  end
end

module StorySpecHelper
  def story_with_new_category
    h = valid_story_attributes.merge :new_category_name=>'new_category'
    h.delete :category_id
    h
  end
  
  def valid_story_attributes(options={})
    {:title => 'My Wedding',
     :description => 'some thoughts',
     :tag_s => 'foo,fee',
     :category_id => categories(:global).id
     }.merge options
  end
  
  def story_without_time_period(options={})
    valid_story_attributes.merge(options)
  end
  
  def story_with_time_period
    valid_story_attributes.merge(time_period_attributes(1.day.ago, Time.now))
  end
  
  def make_story(user, params)
    user.stories.create(params)
  end
end

module RecordingSpecHelper
  def valid_attributes
    {:filename => 'somefile.flv'}
  end
end

module RVideoInspectorSpecHelper
  def inspector
    @inspector = mock('RVideo::Inspector')
    @inspector.stubs(:audio_codec).returns('mpeg')
    @inspector.stubs(:duration).returns('100')
    @inspector.stubs(:fps).returns('100')
    @inspector.stubs(:bitrate).returns('64')
    @inspector.stubs(:bitrate_units).returns('kb/s')
    @inspector.stubs(:width).returns('300')
    @inspector.stubs(:height).returns('400')
    @inspector.stubs(:video_codec).returns('x-flv')
    @inspector
  end
end

module TranscoderSpecHelper
  def mock_transcoder(source)
    Paperclip::Tempfile.expects(:new).returns(@temp = mock('Tempfile'))
    @temp.stubs(:path).returns('/path/to/temp')
    Transcoder.expects(:new).with(source.full_filename, @temp.path).returns(@transcoder = mock('Transcoder'))
    @transcoder.stubs(:command).returns('ffmpeg')
    @transcoder.stubs(:executed_commands).returns('ffmeg exec')
    @transcoder
  end
  
  def flash_file
    fixture_path + 'flash_movie.flv'
  end

  def recorder_file
    fixture_path + 'recorder_audio.flv'
  end

  def tempfile(ext='.tmp')
    Tempfile.new("temp#{ext}").path
  end

  def build_transcoder(source, tempfile)
    Transcoder.new(source, @temp = tempfile)
  end
end

class RenderLayout
  def initialize(expected)
    @expected = 'layouts/' + expected
  end

  def matches?(controller)
    @actual = controller.layout
    @actual == @expected
  end

  def failure_message
    return "render_layout expected #{@expected.inspect}, got #{@actual.inspect}", @expected, @acutual
  end

  def negative_failure_message
    return "render_layout expected #{@expected.inspect} not to equal #{@actual.inspect}", @expected, @actual
  end
end

def render_layout(expected)
  RenderLayout.new(expected)
end

module TimeLockSpecHelper
  def valid_attributes
    {:lockable_id => 1, :lockable_type => 'Lockable', :unlock_on => Date.today+1}
  end
  
  def build_lock
    TimeLock.new(valid_attributes)
  end
end