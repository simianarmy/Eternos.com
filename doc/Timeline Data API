Timeline Data API

NOTES:
Inspired by http://code.google.com/apis/ajaxsearch/documentation/

It will be necessary to implement a javascript library for the Timeline not just for 
drawing and display, but for generating the search queries, parsing results, and
handling errors.  
The Google search API provides a very good example of this type of library, using a SearchControl object that can be configured with options (search parameters, filters), takes a number of Search objects: ie. WebSearch, VideoSearch, BlogSearch, which it executes the queries in parallel.  The returned data is gathered & parsed.  


Request: REST URL
  Method: GET
  Format: /timeline/user_id/start_on/end_on/optional_args
  
Response: 
  JSON Format:
    {request: request_uri,
     responseData: {
       resultCount: int,
       previousDataUri: string,
       futureDataUri: string,
       results: [
        {
          searchClass: email|twitter|story|blog|facebook|other,
          title: text,
          caption: text,
          summary: text,
          time: datetime,
          previewImgUrl: string,
          data: {}
        },
        ...
       ],
       cursor: {
        "pages": [
           { "start": "0", "label": 1 },
           { "start": "4", "label": 2 },
            ...
        ]
      }
     },
     responseDetails: null | string-on-error
     responseStatus: 200 | error_code
    }

Response details
  
  request: request URI
  
  responseDetails: any error messages from response call
  
  responseStatus: success/error status from server
    200 = success (even if 0 results)
    500 = error (more to be added if needed)
  
  responseData: Hash containing results of query, non-empty iff responseStatus == 200
    
    resultCount: number of returned results objects
    
    previousDataUri: URI for pre-loading contents for dates prior to request dates (for cache)
    
    futureDataUri: URI for pre-loading contents for dates after request dates (for cache)
    
    results: Array of hashes
      
      searchClass: Entry data type, currently [email|twitter|story|blog|facebook|other]
        Used by client to parse additional data from object
      
      title: Title of entry
      
      Caption: Caption for entry (for short preview popup?)
      
      Summary: Longer description of entry
      
      Time: Datetime representation for when entry occurred - for timeline positioning
      
      previewImgUrl: url to thumbnail image for entry (tooltip)
      
      data: Hash of type-specific key/values for entry
      
    
  