# $Id$
#
# This is a configuration template for 'god' process monitoring.
#
# God config file for eternos support daemons

RAILS_ROOT  = File.dirname(File.dirname(__FILE__))

def generic_monitoring(w, options = {})
  w.start_if do |start|
    start.condition(:process_running) do |c|
      c.interval = 10.seconds
      c.running = false
      c.notify = 'sysadmin'
    end
  end
  
  w.restart_if do |restart|
    restart.condition(:memory_usage) do |c|
      c.above = options[:memory_limit]
      c.times = [3, 5] # 3 out of 5 intervals
      c.notify = 'sysadmin'
    end
  
    restart.condition(:cpu_usage) do |c|
      c.above = options[:cpu_limit]
      c.times = 5
      c.notify = 'sysadmin'
    end
  end
  
  w.lifecycle do |on|
    on.condition(:flapping) do |c|
      c.to_state = [:start, :restart]
      c.times = 5
      c.within = 5.minute
      c.transition = :unmonitored
      c.retry_in = 10.minutes
      c.retry_times = 5
      c.retry_within = 2.hours
      c.notify = 'sysadmin'
    end
  end
end

God.watch do |w|
  script = "<%= RAILS_ROOT %>/script/workling_client"
  w.name = "eternos-workling_<%= RAILS_ENV %>"
  w.group = "eternos_<%= RAILS_ENV %>"
  w.interval = 60.seconds
  w.start = "RAILS_ENV='<%= RAILS_ENV %>' #{script} start"
  w.restart = "RAILS_ENV='<%= RAILS_ENV %>' #{script} restart"
  w.stop = "#{script} stop"
  w.start_grace = 20.seconds
  w.restart_grace = 20.seconds
  
  generic_monitoring(w, :cpu_limit => 80.percent, :memory_limit => 100.megabytes)
end

God.watch do |w|
  script = "memcached"
  w.name = "memcached"
  w.group = "eternos"
  w.interval = 60.seconds
  w.start = "#{script}"
  w.start_grace = 20.seconds
  w.restart_grace = 20.seconds
    
  generic_monitoring(w, :cpu_limit => 80.percent, :memory_limit => 100.megabytes)
end

God.watch do |w|
  script = "Xvfb"
  w.name = "Xvfb"
  w.group = "eternos"
  w.interval = 5.minutes
  w.start = "Xvfb :1 -screen 0 1024x768x24"
  w.start_grace = 20.seconds
  w.restart_grace = 20.seconds
    
  generic_monitoring(w, :cpu_limit => 80.percent, :memory_limit => 100.megabytes)
end
  



